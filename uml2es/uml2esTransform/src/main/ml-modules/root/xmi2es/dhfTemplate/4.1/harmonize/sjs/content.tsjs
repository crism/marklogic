/*
${ModelDesc}
*/

'use strict'

const xesgen = require("/modelgen/${ModelName}/lib.sjs");
const util = require("/xmi2es/util.sjs");

${EntityContentEnableDMIn}
const dm = require('/ext/declarative-mapper.sjs');
const DM_MAPPING_CONFIG_URI = "${EntityXContentDMMapper}";
function getDMMapper(options) {
  if (!options.mapper) {
    const ctx = dm.newCompilerContext(DM_MAPPING_CONFIG_URI);
    const mapper = dm.prepare(ctx);
    options.mapper = mapper;
  }
  return options.mapper;
}
${EntityContentEnableDMOut}

/*
* Create Content Plugin
*
* @param id         - the identifier returned by the collector
* @param options    - an object containing options. Options are sent from Java
*
* @return - your content
*/
function createContent(id, options) {
  let doc = cts.doc(id);
  let $ioptions := util.setIOptions(id,options);

  let source;

  // for xml we need to use xpath
  if(doc && xdmp.nodeKind(doc) === 'element' && doc instanceof XMLDocument) {
    source = doc
  }
  // for json we need to return the instance
  else if(doc && doc instanceof Document) {
    source = fn.head(doc.root);
  }
  // for everything else
  else {
    source = doc;
  }

  return buildContent_${EntityX}(id, source, options, ioptions);
}

${ContentBuilder}

module.exports = {
  createContent: createContent
};
