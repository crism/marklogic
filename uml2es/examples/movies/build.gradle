buildscript {

	repositories {
		jcenter{url "http://jcenter.bintray.com/"}
		mavenLocal()
		maven { url "http://plugins.gradle.org/m2" }
	}
	dependencies {
		classpath "com.marklogic:ml-gradle:3.4.0"
		classpath "net.saliman:gradle-properties-plugin:1.4.6"
	}
}

apply plugin: "net.saliman.properties"
apply plugin: "com.marklogic.ml-gradle"

repositories {
	jcenter{url "http://jcenter.bintray.com/"}

	// Needed for mlcp dependencies
	maven { url "http://plugins.gradle.org/m2" }
	maven { url "http://developer.marklogic.com/maven2/" }

	// Needed for hadoop dependencies for mlcp
	maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
  // This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
  // to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
  // shown below.  Need to force to use certain version of xml-apis library.
  mlcp {
      resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
      }
    }
}

dependencies {
  mlcp "com.marklogic:mlcp:9.0.6"
  mlcp "org.apache.commons:commons-csv:1.2"
  mlcp files("lib")
}


task ingestMovieData
  ["role", "bio", "movieDoc", "company","person", "movie"].toList().each { entityType ->
  task "ingestEntity${entityType}"(type: com.marklogic.gradle.task.MlcpTask) {  
    def dataDir = "${projectDir}";
    def unixDir = dataDir.replace('\\', '/');
    def regexDir = unixDir+"/data/movie/${entityType}"
    def regex = '"' + regexDir + ",'',/,'',.json,''" + '"'

    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    document_type = "xml"
    input_file_path = "data/movie/${entityType}"
    input_file_type = "documents"
    output_uri_replace = regex
    output_uri_prefix = "/xmi2es/imdb/${entityType}/"
    output_uri_suffix = ".xml"
    output_collections = "xmi2es,imdb,${entityType}"
    output_permissions = "rest-reader,read,rest-writer,update"
    host = mlAppServicesHost
    port = mlAppServicesPort.toInteger()
    transform_module = "/xmi2es/loadMovieTransformation.xqy"
    transform_namespace ="http://marklogic.com/xmi2es/movie"
    transform_param = "${entityType}"
  } 

   ingestMovieData.dependsOn "ingestEntity${entityType}"
}

tasks.findByName('ingestEntitymovie').mustRunAfter 'ingestEntityrole'
tasks.findByName('ingestEntityperson').mustRunAfter 'ingestEntityrole'
tasks.findByName('ingestEntitycompany').mustRunAfter 'ingestEntityrole'


task useInitialDBConfig(type: Copy) {
    from "src/main/ml-config/databases/initial/content-database-INITIAL.json"
    into "src/main/ml-config/databases"
    rename { String fileName ->
        fileName.replace('-INITIAL', '')
    }
}

task useGeneratedDBConfig(type: Copy) {
    from "src/main/ml-config/databases/content-database-GENERATED.json"
    into "src/main/ml-config/databases"
    rename { String fileName ->
        fileName.replace('-GENERATED', '')
    }
}

task deleteGeneratedTDE(type: Delete) {
    delete "src/main/ml-schemas/tde/MovieModel-0.0.1.tdex"
    delete "src/main/ml-schemas/tde/MovieModel-0.0.1-GENERATED.tdex"
    delete "src/main/ml-schemas/MovieModel-0.0.1-GENERATED.tdex"
}

task loadXMI(type: com.marklogic.gradle.task.MlcpTask) {
  def xmiDir = new File("${projectDir}").getParentFile().getAbsolutePath() + "/umlModels"
  def unixDir = xmiDir.replace('\\', '/');
  def regex = '"' + unixDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "xml"
  input_file_path = xmiDir + "/IMDBMovie.xml"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/xmi/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "xmi2es"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()

  transform_module = "/xmi2es/xmi2esTransform.xqy"
  transform_namespace ="http://marklogic.com/xmi2es"
  transform_param = "dummy"
}

task loadExtendedModel(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()

  input_file_path =  "data/entity-services-extension/*.ttl" 
  input_file_type = "rdf" 
  output_uri_prefix = "/triplestore"
}

task fetchDescriptors(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "EXPORT"
  output_file_path = "data/entity-services-dump"
  collection_filter = "xmi2es"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()
}

task copyES(type: Copy) {
    from "data/entity-services-dump/xmi2es/es/IMDBMovie.json"
    into "data/entity-services" 
}

task copyESExt(type: Copy) {
    from "data/entity-services-dump/xmi2es/extension/IMDBMovie.ttl"
    into "data/entity-services-extension" 
}

task deleteESDump(type: Delete) {
    delete "data/entity-services-dump"
}

task clearGenerated(type: Delete) {
  dependsOn 'deleteESDump'
  dependsOn 'deleteGeneratedTDE'
  delete "src/main/ml-config/databases/content-database.json"
  delete "src/main/ml-config/databases/content-database-GENERATED.json"
  delete "src/main/ml-modules/ext/entity-services/MovieModel-0.0.1-GENERATED.xqy"
  delete "src/main/ml-modules/options/MovieModel.xml"
}

task includeXMI2ESTransform(type: Copy) {
    from "../../uml2esTransform/src/main/ml-modules/root/xmi2es"
    into "src/main/ml-modules/root/xmi2es"
}

task ingestModel() {
  dependsOn 'deleteESDump'
  dependsOn 'loadXMI'
  dependsOn 'fetchDescriptors'
  dependsOn 'copyES'
  dependsOn 'copyESExt'
  tasks.findByName('loadXMI').mustRunAfter 'deleteESDump'
  tasks.findByName('fetchDescriptors').mustRunAfter 'loadXMI'
  tasks.findByName('copyES').mustRunAfter 'fetchDescriptors'
  tasks.findByName('copyESExt').mustRunAfter 'fetchDescriptors'
}

