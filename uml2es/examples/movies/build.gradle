buildscript {

	repositories {
		jcenter{url "http://jcenter.bintray.com/"}
		mavenLocal()
		maven { url "http://plugins.gradle.org/m2" }
	}
	dependencies {
		classpath "com.marklogic:ml-gradle:3.4.0"
		classpath "net.saliman:gradle-properties-plugin:1.4.6"
	}
}

apply plugin: "net.saliman.properties"
apply plugin: "com.marklogic.ml-gradle"

repositories {
	jcenter{url "http://jcenter.bintray.com/"}

	// Needed for mlcp dependencies
	maven { url "http://plugins.gradle.org/m2" }
	maven { url "http://developer.marklogic.com/maven2/" }

	// Needed for hadoop dependencies for mlcp
	maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
  // This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
  // to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
  // shown below.  Need to force to use certain version of xml-apis library.
  mlcp {
      resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
      }
    }
}

/**
 * ML 8.0-5 and 7.0-6 introduced a single mlcp dependency - see http://developer.marklogic.com/maven2/com/marklogic/mlcp/.
 * The 8.0-5 mlcp may very well work on ML versions prior to 8.0-5. If it doesn't, try the mlcp-Hadoop2
 * and marklogic-mapreduce2 dependencies that are commented out by default instead of the mlcp dependency.
 *
 * Note that at least with version 8.0-5 of mlcp, mlcp will complain on Windows that it cannot find
 * bin/winutils.exe. This does not appear to have any impact on mlcp behavior though.
 */
dependencies {


  mlcp "com.marklogic:mlcp:8.0.6.3"

  /**
   * If you need to import delimited text, be sure to include this dependency as well.
   */
  mlcp "org.apache.commons:commons-csv:1.2"

  /**
   * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
   * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
   * mlcp include a directory or some other resource that provides a log4j.properties file.
   */
  mlcp files("lib")
}


task loadMovies(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/movie/fictional/movies";
  def regex = '"' + regexDir + ",'',/,'',.json,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlAppConfig.contentDatabaseName
  document_type = "json"
  input_file_path = "data/movie/fictional/movies"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/imdb/movie/"
  output_uri_suffix = ".xml"
  output_collections = "xmi2es,imdb,movies"
  output_permissions = "rest-reader,read,rest-writer,update"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()
  transform_module = "/xmi2es/loadMovieTransformation.xqy"
  transform_namespace ="http://marklogic.com/xmi2es/movie"
  transform_param = "movie"

  logOutputUri = "/mlcp/log/movies.txt"
}

task loadMovieDocs(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/movie/fictional/movieDocs";
  def regex = '"' + regexDir + ",'',/,'',.json,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlAppConfig.contentDatabaseName
  document_type = "json"
  input_file_path = "data/movie/fictional/movieDocs"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/imdb/movieDoc/"
  output_uri_suffix = ".xml"
  output_collections = "xmi2es,imdb,movieDocs"
  output_permissions = "rest-reader,read,rest-writer,update"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()
  transform_module = "/xmi2es/loadMovieTransformation.xqy"
  transform_namespace ="http://marklogic.com/xmi2es/movie"
  transform_param = "doc"
}

task loadBios(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/movie/fictional/bios";
  def regex = '"' + regexDir + ",'',/,'',.json,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlAppConfig.contentDatabaseName
  document_type = "json"
  input_file_path = "data/movie/fictional/bios"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/imdb/bio/"
  output_uri_suffix = ".xml"
  output_collections = "xmi2es,imdb,bios"
  output_permissions = "rest-reader,read,rest-writer,update"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()
  transform_module = "/xmi2es/loadMovieTransformation.xqy"
  transform_namespace ="http://marklogic.com/xmi2es/movie"
  transform_param = "doc"
}

task loadPersonContribs(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/movie/fictional/persons";
  def regex = '"' + regexDir + ",'',/,'',.json,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlAppConfig.contentDatabaseName
  document_type = "json"
  input_file_path = "data/movie/fictional/persons"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/imdb/person/"
  output_uri_suffix = ".xml"
  output_collections = "xmi2es,imdb,persons"
  output_permissions = "rest-reader,read,rest-writer,update"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()
  transform_module = "/xmi2es/loadMovieTransformation.xqy"
  transform_namespace ="http://marklogic.com/xmi2es/movie"
  transform_param = "person"
}

task loadCompanyContribs(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/movie/fictional/companies";
  def regex = '"' + regexDir + ",'',/,'',.json,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlAppConfig.contentDatabaseName
  document_type = "json"
  input_file_path = "data/movie/fictional/companies"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/imdb/company/"
  output_uri_suffix = ".xml"
  output_collections = "xmi2es,imdb,companies"
  output_permissions = "rest-reader,read,rest-writer,update"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()
  transform_module = "/xmi2es/loadMovieTransformation.xqy"
  transform_namespace ="http://marklogic.com/xmi2es/movie"
  transform_param = "company"
}

task loadRoles(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/movie/fictional/roles";
  def regex = '"' + regexDir + ",'',/,'',.json,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlAppConfig.contentDatabaseName
  document_type = "json"
  input_file_path = "data/movie/fictional/roles"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/imdb/role/"
  output_uri_suffix = ".xml"
  output_collections = "xmi2es,imdb,roles"
  output_permissions = "rest-reader,read,rest-writer,update"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()
  transform_module = "/xmi2es/loadMovieTransformation.xqy"
  transform_namespace ="http://marklogic.com/xmi2es/movie"
  transform_param = "role"
}

task ingestMovie() {
  dependsOn 'loadMovies'
  dependsOn 'loadMovieDocs'
  dependsOn 'loadPersonContribs'
  dependsOn 'loadCompanyContribs'
  dependsOn 'loadRoles'
  dependsOn 'loadBios'
}

task useInitialDBConfig(type: Copy) {
    from "src/main/ml-config/databases/initial/content-database-INITIAL.json"
    into "src/main/ml-config/databases"
    rename { String fileName ->
        fileName.replace('-INITIAL', '')
    }
}

task useGeneratedDBConfig(type: Copy) {
    from "src/main/ml-config/databases/content-database-GENERATED.json"
    into "src/main/ml-config/databases"
    rename { String fileName ->
        fileName.replace('-GENERATED', '')
    }
}

task deleteGeneratedTDE(type: Delete) {
    delete "src/main/ml-schemas/tde/MovieModel-0.0.1.tdex"
    delete "src/main/ml-schemas/tde/MovieModel-0.0.1-GENERATED.tdex"
}

task includeXMI2ESTransform(type: Copy) {
    from "../../uml2esTransform/src/main/ml-modules/root/xmi2es/loadXMITransformation.xqy"
    into "src/main/ml-modules/root/xmi2es"
}

task loadXMI(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/xmi";
  def regex = '"' + regexDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "xml"
  input_file_path = "data/xmi"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/xmi/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "xmi2es"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()
  transform_module = "/xmi2es/loadXMITransformation.xqy"
  transform_namespace ="http://marklogic.com/xmi2es"
  transform_param = "dummy"
}

task fetchDescriptors(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "EXPORT"
  output_file_path = "data/entity-services-dump"
  directory_filter = "/xmi2es/es/"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()
}

task copyES(type: Copy) {
    from "data/entity-services-dump/xmi2es/es/IMDBMovie.xml"
    into "data/entity-services" 
}

task deleteESDump(type: Delete) {
    delete "data/entity-services-dump"
}

task clearGenerated(type: Delete) {
  dependsOn 'deleteESDump'
  dependsOn 'deleteGeneratedTDE'
  delete "src/main/ml-config/databases/content-database.json"
  delete "src/main/ml-config/databases/content-database-GENERATED.json"
  delete "src/main/ml-modules/ext/entity-services/MovieModel-0.0.1-GENERATED.xqy"
  delete "src/main/ml-modules/options/MovieModel.xml"
}

task ingestModel() {
  dependsOn 'deleteESDump'
  dependsOn 'loadXMI'
  dependsOn 'fetchDescriptors'
  dependsOn 'copyES'
  tasks.findByName('loadXMI').mustRunAfter 'deleteESDump'
  tasks.findByName('fetchDescriptors').mustRunAfter 'loadXMI'
  tasks.findByName('copyES').mustRunAfter 'fetchDescriptors'
}

