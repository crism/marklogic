<export><workspace name="XMI2ESMovies"><query name="Movie SQL" focus="false" listorder="1" taborder="3" active="true" database="3312104954852606233" server="17712127133693931746" database-name="xmi2es-examples-movies-content" server-name="xmi2es-examples-movies" mode="sql">-- SQL/TDE example
-- Show all movies
-- Run this against your movie content DB

select * from Movie</query><query name="Parental SQL" focus="false" listorder="2" taborder="4" active="true" database="3312104954852606233" server="17712127133693931746" database-name="xmi2es-examples-movies-content" server-name="xmi2es-examples-movies" mode="sql">-- SQL/TDE example
-- Show all movie parental certs
-- Run this against your movie content DB

select Movie.movieId, Movie.releaseYear, Movie_parentalCerts.country, Movie_parentalCerts.currentCertificate 
from Movie_parentalCerts
inner join Movie
on Movie_parentalCerts.movieId=Movie.movieId
order by Movie.movieId

</query><query name="Company and Filmography SQL" focus="true" listorder="3" taborder="5" active="true" database="3312104954852606233" server="17712127133693931746" database-name="xmi2es-examples-movies-content" server-name="xmi2es-examples-movies" mode="sql">-- SQL/TDE example
-- Show all company contributors and their roles
-- Run this against your movie content DB

select CompanyContributor.contribId, CompanyContributor_filmography.roleType, CompanyContributor_filmography.refMovie
from CompanyContributor
inner join CompanyContributor_filmography
on CompanyContributor.contribId = CompanyContributor_filmography.contribId</query><query name="Person and Bios SQL" focus="false" listorder="5" taborder="6" active="true" database="3312104954852606233" server="17712127133693931746" database-name="xmi2es-examples-movies-content" server-name="xmi2es-examples-movies" mode="sql">-- SQL/TDE example
-- Show all person contributors and their bios
-- Run this against your movie content DB

select PersonContributor.contribId, PersonContributor.dateOfBirth, PersonContributor.dateOfDeath, PersonContributor.placeOfBirth,
  UserDocument.authorId, UserDocument.docText
from PersonContributor
inner join UserDocument
on PersonContributor.contribId = UserDocument.contribDoc</query><query name="Movie Parentals, Cast, Docs" focus="false" listorder="8" taborder="1" active="true" database="3312104954852606233" server="17712127133693931746" database-name="xmi2es-examples-movies-content" server-name="xmi2es-examples-movies" mode="xquery">xquery version "1.0-ml";

(:
Shows sample XML documents. Choose a movie, then find its related parentals and roles (contained).
Get its user docs also (linked).
Run this against your movie content database.
:)

let $movie := fn:doc("/xmi2es/imdb/movie/movies1.xml")
let $docs := cts:search(fn:doc(), cts:and-query((
  cts:collection-query("movieDoc"),
  cts:element-value-query(xs:QName("movieDoc"), $movie//movieId)
)))
return ("Movie", $movie, "Parental", $movie//ParentalCertificate, "Cast", $movie//Role, "Docs", $docs)</query><query name="Person, Filmography, Docs" focus="false" listorder="9" taborder="2" active="true" database="3312104954852606233" server="17712127133693931746" database-name="xmi2es-examples-movies-content" server-name="xmi2es-examples-movies" mode="xquery">xquery version "1.0-ml";

(:
Shows sample XML documents. Choose a person contributor, then find his/her related roles (contained).
Get his/her bio docs also (linked).
Run this against your movie content database.
:)

let $contrib := fn:doc("/xmi2es/imdb/person/persons2.xml")
let $docs := cts:search(fn:doc(), cts:and-query((
  cts:collection-query("bio"),
  cts:element-value-query(xs:QName("contribDoc"), $contrib//contribId)
)))
return ("Contrib", $contrib, "Filmography", $contrib//Role, "Docs", $docs)</query></workspace></export>
