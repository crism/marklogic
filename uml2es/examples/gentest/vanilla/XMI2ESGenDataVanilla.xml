<export><workspace name="XMI2ESGenDataVanilla"><query name="insertXML" focus="false" listorder="1" taborder="1" active="true" database="13207800994987417675" server="9484533440839814663" database-name="xmi2es-examples-gentest-vanilla-content" server-name="xmi2es-examples-gentest-vanilla" mode="xquery">xquery version "1.0-ml";

xdmp:document-insert("/testx.xml", &lt;envelope&gt;&lt;instance&gt;&lt;data&gt;x&lt;/data&gt;&lt;/instance&gt;&lt;/envelope&gt;)

</query><query name="insertJSON" focus="false" listorder="2" taborder="2" active="true" database="13207800994987417675" server="9484533440839814663" database-name="xmi2es-examples-gentest-vanilla-content" server-name="xmi2es-examples-gentest-vanilla" mode="javascript">'use strict';

declareUpdate();

xdmp.documentInsert("/testj.json", {"envelope": {"instance": {"data": "j"}}});

</query><query name="testSJS" focus="false" listorder="3" taborder="3" active="true" database="13207800994987417675" server="9484533440839814663" database-name="xmi2es-examples-gentest-vanilla-content" server-name="xmi2es-examples-gentest-vanilla" mode="javascript">'use strict';

const ajj = require("/esconversion/Maudle/A/Ajj.sjs");
const ajx = require("/esconversion/Maudle/A/Ajx.sjs");
const bjj = require("/esconversion/Maudle/B/Bjj.sjs");
const bjx = require("/esconversion/Maudle/B/Bjx.sjs");

var options, ret;
var results = [];

options = {};
ret = ajj.createContent("/testj.json", cts.doc("/testj.json"), options);
results.push("ajj");
results.push(ret);
results.push(options);

options = {};
ret = ajj.createContent("/testx.xml", cts.doc("/testx.xml"), options);
results.push("ajj");
results.push(ret);
results.push(options);

options = {};
ret = ajx.createContent("/testx.xml", cts.doc("/testx.xml"), options);
results.push("ajx");
results.push(ret);
results.push(options);

options = {};
ret = ajx.createContent("/testj.json", cts.doc("/testj.json"), options);
results.push("ajx");
results.push(ret);
results.push(options);

options = {};
ret = bjj.createContent("/testj.json", cts.doc("/testj.json"), options);
results.push("bjj");
results.push(ret);
results.push(options);

options = {};
ret = bjj.createContent("/testx.xml", cts.doc("/testx.xml"), options);
results.push("bjj");
results.push(ret);
results.push(options);

options = {};
ret = bjx.createContent("/testx.xml", cts.doc("/testx.xml"), options);
results.push("bjx");
results.push(ret);
results.push(options);

options = {};
ret = bjx.createContent("/testj.json", cts.doc("/testj.json"), options);
results.push("bjx");
results.push(ret);
results.push(options);

results;
</query><query name="testXQY" focus="true" listorder="4" taborder="4" active="true" database="13207800994987417675" server="9484533440839814663" database-name="xmi2es-examples-gentest-vanilla-content" server-name="xmi2es-examples-gentest-vanilla" mode="xquery">import module namespace axj = "http://marklogic.com/data-hub/plugins/Axj" at "/esconversion/Maudle/A/Axj.xqy" ;
import module namespace axx = "http://marklogic.com/data-hub/plugins/Axx" at "/esconversion/Maudle/A/Axx.xqy" ;
import module namespace bxj = "http://marklogic.com/data-hub/plugins/Bxj" at "/esconversion/Maudle/B/Bxj.xqy" ;
import module namespace bxx = "http://marklogic.com/data-hub/plugins/Bxx" at "/esconversion/Maudle/B/Bxx.xqy" ;

let $axj-options := map:map()
let $axj-ret := axj:buildContent_A("/testj.json",fn:doc("/testj.json"),$axj-options,$axj-options)

let $axjx-options := map:map()
let $axjx-ret := axj:buildContent_A("/testx.xml",fn:doc("/testx.xml"),$axjx-options,$axjx-options)

let $axx-options := map:map()
let $axx-ret := axx:buildContent_A("/testx.xml",fn:doc("/testx.xml"),$axx-options,$axx-options)

let $axxj-options := map:map()
let $axxj-ret := axx:buildContent_A("/testj.json",fn:doc("/testj.json"),$axxj-options,$axxj-options)

let $bxj-options := map:map()
let $bxj-ret := bxj:buildContent_B("/testj.json",fn:doc("/testj.json"),$bxj-options,$bxj-options)

let $bxjx-options := map:map()
let $bxjx-ret := bxj:buildContent_B("/testx.xml",fn:doc("/testx.xml"),$bxjx-options,$bxjx-options)

let $bxx-options := map:map()
let $bxx-ret := bxx:buildContent_B("/testx.xml",fn:doc("/testx.xml"),$bxx-options,$bxx-options)

let $bxxj-options := map:map()
let $bxxj-ret := bxx:buildContent_B("/testj.json",fn:doc("/testj.json"),$bxxj-options,$bxxj-options)

return
(
  "axj",
  $axj-ret,
  $axj-options,
  "axjx",
  $axjx-ret,
  $axjx-options,
  "axx",
  $axx-ret,
  $axx-options,
  "axxj",
  $axxj-ret,
  $axxj-options,
  "bxj",
  $bxj-ret,
  $bxj-options,
  "bxjx",
  $bxjx-ret,
  $bxjx-options,
  "bxx",
  $bxx-ret,
  $bxx-options,
  "bxxj",
  $bxxj-ret,
  $bxxj-options
)</query></workspace></export>
