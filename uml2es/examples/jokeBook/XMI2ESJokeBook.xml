<export><workspace name="XMI2ESJokeBook"><query name="Generated Triples WIth SJS/JSON" focus="true" listorder="3" taborder="2" active="true" database="8734108019621827999" server="12936811969306392535" database-name="xmi2es-examples-jokeBook-content" server-name="xmi2es-examples-jokeBook" mode="javascript">'use strict';

declareUpdate();

const xesgen = require("/JokeBook/lib.sjs");

/*
Run the following to create JSON envelopes with embedded triples for joke book entity types. This uses the SJS code generated by the toolkit's transform!
When done, click on Explore and inspect the contents of each JSON in the testdata collection. Do the triples you see match what you would expect from the UML model?

Make sure you run this against the content DB. In the Database dropdown, select xmi2es-examples-jookBook-content.
*/
 
// Let's create a school
var school = {
  "name": "LaffU"
};
var schoolOptions = {};
xesgen.doCalculation_FooleSchool_iri("", school, schoolOptions);
var schoolTriples = xesgen.setTriples_FooleSchool("", school, null, schoolOptions);
xdmp.documentInsert("/school/1.json", {"triples": schoolTriples, "instance": school}, {"collections": "testdata"});

// Let's create a contributor
var contrib = {
  "fooleID": "haha1",
  "firstName": "Mike",
  "lastName": "Havey",
  "nicknames": ["snake", "bix"],
  "attended": schoolOptions.iri
};
var contribOptions = {};
xesgen.doCalculation_JokeContributor_iri("", contrib, contribOptions);
xesgen.doCalculation_JokeContributor_brilliantWorksIRI("", contrib, contribOptions);
var contribTriples = xesgen.setTriples_JokeContributor("", contrib, null, contribOptions);
xdmp.documentInsert("/contrib/1.json", {"triples":contribTriples, "instance": contrib}, {"collections": "testdata"});

var joke = {
  "jokeID": "DeadParrot",
  "version": 1,
  "text": "What do you call a dead parrot? - A polygon",
  "tags": ["math", "nerd"],
  "funniness": 0.6,
  "parentalRating": 0.9,
  "excludedInCountries": ["CAN"],
  "updateDateTime": new Date(),
  "revisionComment": "Initial",
  "contribRole": "Author"
};
var jokeOptions = {};
xesgen.doCalculation_Joke_iri("", joke, jokeOptions);
jokeOptions.contributor = contribOptions.iri;
var jokeTriples = xesgen.setTriples_Joke("", joke, null, jokeOptions); 
xdmp.documentInsert("/joke/1.json", {"triples": jokeTriples, "instance": joke}, {"collections": "testdata"});

var joke2 = {
  "jokeID": "RedSuspenders",
  "version": 1,
  "text": "Why does a fireman wear red suspenders - To keep his pants up",
  "tags": ["kid", "lame"],
  "funniness": 0.3,
  "parentalRating": 0.85,
  "excludedInCountries": ["CAN"],
  "updateDateTime": new Date(),
  "revisionComment": "Initial",
  "contribRole": "Author"
};
var joke2Options = {};
xesgen.doCalculation_Joke_iri("", joke2, joke2Options);
joke2Options.contributor = contribOptions.iri;
var joke2Triples = xesgen.setTriples_Joke("", joke2, null, joke2Options); 
xdmp.documentInsert("/joke/2.json", {"triples": joke2Triples, "instance": joke2}, {"collections": "testdata"});

// Let's create a joke book
var book = {
  "isbn": "42",
  "title": "Math Jokes",
  "releaseDate": "2019-01-01",
  "editors": [contribOptions.iri]
};
var bookOptions  = {};
xesgen.doCalculation_JokeBook_IRI("", book, bookOptions); 
bookOptions.selectedJokes = [jokeOptions.iri, joke2Options.iri];
var bookTriples = xesgen.setTriples_JokeBook("", book, null, bookOptions);
xdmp.documentInsert("/book/1.json", {"triples": bookTriples, "instance": book}, {"collections": "testdata"});
</query><query name="Generated Triples WIth XQuery/XML" focus="false" listorder="2" taborder="1" active="true" database="8734108019621827999" server="12936811969306392535" database-name="xmi2es-examples-jokeBook-content" server-name="xmi2es-examples-jokeBook" mode="xquery">xquery version "1.0-ml";

import module namespace xesgen = "http://com.marklogic.es.uml.joke/JokeBook-0.0.1" at "/JokeBook/lib.xqy" ;

(:
Run the following to create XML envelopes with embedded triples for joke book entity types. This uses the XQuery code generated by the toolkit's transform!
When done, click on Explore and inspect the contents of each XML in the testdata collection. Do the triples you see match what you would expect from the UML model?

Make sure you run this against the content DB. In the Database dropdown, select xmi2es-examples-jookBook-content.
:)


(: create an envelope of instance and triples :)
declare function local:createEnvelope($type as xs:string, $instance as map:map, $triples as sem:triple*) as node() {
  element {"envelope"} {(
    element {"triples"} {$triples},
    element {"instance"} {
      element {$type} {for $k in map:keys($instance) return
        for $v in map:get($instance, $k) return element {$k} {$v}}
    }
   )}
};

(:
In this tab, we create sample data as XML envelopes. Using the code generated by the toolkit's transform, we create triples and embed them in the envelope.
:)

(: Let's create a school :)
let $school := map:new((map:entry("name", "LaffU")))
let $schoolOptions := map:map()
let $_ := xesgen:doCalculation_FooleSchool_iri("", $school, $schoolOptions)
let $schoolTriples := xesgen:setTriples_FooleSchool("", $school, (), $schoolOptions)
let $_ := xdmp:document-insert("/school/1.xml", local:createEnvelope("School", $school, $schoolTriples), map:new((map:entry("collections", "testdata"))))

(: and now a contrib :)
let $contrib := map:new((
  map:entry("fooleID", "haha1"),
  map:entry("firstName", "Mike"),
  map:entry("lastName", "Havey"),
  map:entry("nicknames", ("snake", "bix")),
  map:entry("attended", map:get($schoolOptions, "iri"))))
let $contribOptions := map:map()
let $_ := xesgen:doCalculation_JokeContributor_iri("", $contrib, $contribOptions)
let $_ := xesgen:doCalculation_JokeContributor_brilliantWorksIRI("", $contrib, $contribOptions)
let $contribTriples := xesgen:setTriples_JokeContributor("", $contrib, (), $contribOptions)
let $_ := xdmp:document-insert("/contrib/1.xml", local:createEnvelope("Contrib", $contrib, $contribTriples), map:new((map:entry("collections", "testdata"))))

(: and some jokes :)
let $joke := map:new((
  map:entry("jokeID", "DeadParrot"),
  map:entry("version", 1),
  map:entry("text", "What do you call a dead parrot? - A polygon"),
  map:entry("tags", ("math", "nerd")),
  map:entry("funniness", 0.6),
  map:entry("parentalRating", 0.9),
  map:entry("excludedInCountries", ("CAN")),
  map:entry("updateDateTime", fn:current-dateTime()),
  map:entry("revisionComment", "Initial"),
  map:entry("contribRole", "Author")))
let $jokeOptions := map:map()
let $_ := xesgen:doCalculation_Joke_iri("", $joke, $jokeOptions)
let $_ := map:put($jokeOptions, "contributor", map:get($contribOptions, "iri"))
let $jokeTriples := xesgen:setTriples_Joke("", $joke, (), $jokeOptions)
let $_ := xdmp:document-insert("/joke/1.xml", local:createEnvelope("Joke", $joke, $jokeTriples), map:new((map:entry("collections", "testdata"))))

let $joke2 := map:new((
  map:entry("jokeID", "RedSuspenders"),
  map:entry("version", 1),
  map:entry("text", "Why does a fireman wear red suspenders - To keep his pants up"),
  map:entry("tags", ("kid", "lame")),
  map:entry("funniness", 0.3),
  map:entry("parentalRating", 0.85),
  map:entry("excludedInCountries", ("CAN")),
  map:entry("updateDateTime", fn:current-dateTime()),
  map:entry("revisionComment", "Initial"),
  map:entry("contribRole", "Author")))
let $joke2Options := map:map()
let $_ := xesgen:doCalculation_Joke_iri("", $joke2, $joke2Options)
let $_ := map:put($joke2Options, "contributor", map:get($contribOptions, "iri"))
let $joke2Triples := xesgen:setTriples_Joke("", $joke2, (), $joke2Options)
let $_ := xdmp:document-insert("/joke/2.xml", local:createEnvelope("Joke", $joke2, $joke2Triples), map:new((map:entry("collections", "testdata"))))

(: and now a joke book:)
let $book := map:new((
  map:entry("isbn", "42"),
  map:entry("title", "Math Jokes"),
  map:entry("releaseDate", "2019-01-01"),
  map:entry("editors", map:get($contribOptions, "iri"))))
let $bookOptions  := map:map()
let $_ := xesgen:doCalculation_JokeBook_IRI("", $book, $bookOptions)
let $_ := map:put($bookOptions, "selectedJokes", (map:get($jokeOptions, "iri"), map:get($joke2Options, "iri")))
let $bookTriples := xesgen:setTriples_JokeBook("", $book, (), $bookOptions)
let $_ := xdmp:document-insert("/book/1.xml", local:createEnvelope("Book", $book, $bookTriples), map:new((map:entry("collections", "testdata"))))
return ()



</query></workspace></export>
