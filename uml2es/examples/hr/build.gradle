buildscript {
  repositories {
    maven {url 'http://developer.marklogic.com/maven2/'}
  }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'

    // This plugin allows you to create different environments
    // for your gradle deploy. Each environment is represented
    // by a gradle-${env}.properties file
    // See https://github.com/stevesaliman/gradle-properties-plugin
    // specify the env on the command line with:
    // gradle -PenvironmentName=x ...
    id 'net.saliman.properties' version '1.4.6'

    // This gradle plugin extends the ml-gradle plugin with
    // commands that make the Data Hub Framework do its magic
    id 'com.marklogic.ml-data-hub' version '4.1.0'
}

repositories {
    jcenter()
    maven {url 'http://developer.marklogic.com/maven2/'}

    // Needed for mlcp dependencies
    maven { url "http://plugins.gradle.org/m2" }
    maven { url "http://developer.marklogic.com/maven2/" }

    // Needed for hadoop dependencies for mlcp
    maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
  // This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
  // to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
  // shown below.  Need to force to use certain version of xml-apis library.
  mlcp {
      resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
      }
    }
}

dependencies {
    // this allows you to write custom java code that depends
    // on the Data Hub Framework library
    compile 'com.marklogic:marklogic-data-hub:4.1.0'
    compile 'com.marklogic:marklogic-xcc:9.0.7'

    mlcp "com.marklogic:mlcp:9.0.6"
    mlcp "org.apache.commons:commons-csv:1.2"
    mlcp files("lib")
}

task loadGlobalEmployee(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/hr/GlobalCorp/employee";
  def regex = '"' + regexDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlStagingPort.toInteger()
  database = mlStagingDbName

  document_type = "json"
  input_file_path =  "data/hr/GlobalCorp/employee/EmployeeTable.csv"
  input_file_type ="delimited_text" 

  output_collections= "Employee,LoadEmployee,input" 
  output_permissions= "rest-reader,read,rest-writer,update" 
  output_uri_replace=regex
  output_uri_prefix = "/hr/employee/global/"
  output_uri_suffix = ".xml"

  transform_module="/data-hub/4/transforms/mlcp-flow-transform.xqy" 
  transform_namespace="http://marklogic.com/data-hub/mlcp-flow-transform" 
  transform_param "entity-name=Employee,flow-name=LoadEmployee"	
}

task loadGlobalSalary(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/hr/GlobalCorp/employee";
  def regex = '"' + regexDir + ",'',/,''" + '"'

  println regex

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlStagingPort.toInteger()
  database = mlStagingDbName

  document_type = "json"
  input_file_path =  "data/hr/GlobalCorp/employee/SalaryTable.csv"
  input_file_type ="delimited_text" 

  output_collections= "Salary,LoadEmployee,input" 
  output_permissions= "rest-reader,read,rest-writer,update" 
  output_uri_replace=regex
  output_uri_prefix = "/hr/salary/global/"
  output_uri_suffix = ".xml"

  transform_module="/data-hub/4/transforms/mlcp-flow-transform.xqy" 
  transform_namespace="http://marklogic.com/data-hub/mlcp-flow-transform" 
  transform_param "entity-name=Employee,flow-name=LoadEmployee"	
}

task loadGlobalDepartment(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/hr/GlobalCorp/department";
  def regex = '"' + regexDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlStagingPort.toInteger()
  database = mlStagingDbName

  document_type = "xml"
  input_file_path =  "data/hr/GlobalCorp/department"
  input_file_type ="delimited_text" 

  output_collections= "Department,LoadDepartment,input" 
  output_permissions= "rest-reader,read,rest-writer,update" 
  output_uri_replace=regex
  output_uri_prefix = "/hr/department/global/"
  output_uri_suffix = ".xml"

  transform_module="/data-hub/4/transforms/mlcp-flow-transform.xqy" 
  transform_namespace="http://marklogic.com/data-hub/mlcp-flow-transform" 
  transform_param "entity-name=Department,flow-name=LoadDepartment"	
}

task loadAcme(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/hr/AcmeTech";
  def regex = '"' + regexDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlStagingPort.toInteger()
  database = mlStagingDbName

  document_type = "json"
  input_file_path =  "data/hr/AcmeTech" 
  input_file_type = "documents" 

  output_collections "Employee,LoadEmployee,input" 
  output_permissions "rest-reader,read,rest-writer,update" 
  output_uri_replace = regex 
  output_uri_prefix = "/hr/employee/acme/"

  transform_module="/data-hub/4/transforms/mlcp-flow-transform.xqy" 
  transform_namespace="http://marklogic.com/data-hub/mlcp-flow-transform" 
  transform_param "entity-name=Employee,flow-name=LoadEmployee"	
}

task loadSummaryOrgTriples(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlFinalPort.toInteger()
  database = mlFinalDbName

  document_type = "json"
  input_file_path =  "data/triples/global-org.ttl" 
  input_file_type = "rdf" 
  output_uri_prefix = "/triplestore"
  output_graph = "http://www.w3.org/ns/org"
}

task runInputMLCP() {
  dependsOn 'loadAcme'
  dependsOn 'loadGlobalEmployee'
  dependsOn 'loadGlobalSalary'
  dependsOn 'loadGlobalDepartment'
}

task loadXMI(type: com.marklogic.gradle.task.MlcpTask) {
  def xmiDir = new File("${projectDir}").getParentFile().getAbsolutePath() + "/umlModels"
  def unixDir = xmiDir.replace('\\', '/');
  def regex = '"' + unixDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "xml"
  input_file_path = xmiDir + "/DHFEmployeeSample.xml"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/xmi/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "xmi2es"
  host = mlHost
  port = mlFinalPort.toInteger()

  transform_module = "/xmi2es/xmi2esTransform.xqy"
  transform_namespace ="http://marklogic.com/xmi2es"
  transform_param = "dummy"
}

task loadExtendedModel(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlFinalPort.toInteger()

  input_file_path =  "data/entity-services-extension/*.ttl" 
  input_file_type = "rdf" 
  output_uri_prefix = "/triplestore"
}

task fetchDescriptors(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "EXPORT"
  output_file_path = "data/entity-services-dump"
  collection_filter = "xmi2es"
  host = mlHost
  port = mlFinalPort.toInteger()
}

task copyES(type: Copy) {
    from "data/entity-services-dump/xmi2es/es/DHFEmployeeSample.json"
    into "data/entity-services" 
}

task copyGenCode(type: Copy) {
    from "data/entity-services-dump/xmi2es/gen"
    into "src/main/ml-modules/root" 
}

task copyESExt(type: Copy) {
    from "data/entity-services-dump/xmi2es/extension/DHFEmployeeSample.ttl"
    into "data/entity-services-extension" 
}

task deleteESDump(type: Delete) {
    delete "data/entity-services-dump"
}

task includeXMI2ESTransform(type: Copy) {
    from "../../uml2esTransform/src/main/ml-modules/root/xmi2es"
    into "src/main/ml-modules/root/xmi2es"
}

task ingestModel() {
  dependsOn 'deleteESDump'
  dependsOn 'loadXMI'
  dependsOn 'fetchDescriptors'
  dependsOn 'copyES'
  dependsOn 'copyESExt'
  dependsOn 'copyGenCode'
  tasks.findByName('loadXMI').mustRunAfter 'deleteESDump'
  tasks.findByName('fetchDescriptors').mustRunAfter 'loadXMI'
  tasks.findByName('copyES').mustRunAfter 'fetchDescriptors'
  tasks.findByName('copyESExt').mustRunAfter 'fetchDescriptors'
  tasks.findByName('copyGenCode').mustRunAfter 'fetchDescriptors'
}

// use this instead of the heavy mlGenerateModelArtifacts
task deployESModelToFinal(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/entity-services";
  def regex = '"' + regexDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "json"
  input_file_path = "data/entity-services"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/marklogic.com/entity-services/models/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "http://marklogic.com/entity-services/models"
  host = mlHost
  port = mlFinalPort.toInteger()
}

/*
The rest is cookie cutter
*/

task deleteCutDump(type: Delete) {
    delete "data/cookieCutter-dump"
}

task cutEntities(type: com.marklogic.gradle.task.ServerEvalTask) {
  def modelName = project.findProperty("modelName")
  if (modelName != null) modelName = '"' + modelName + '"'
  def entities = project.findProperty("entities") 
  if (entities != null) entities = '"' + entities + '"'
  def entitySelect = project.findProperty("entitySelect") 
  if (entitySelect != null) entitySelect = '"' + entitySelect + '"'
  def stg = '"' + mlStagingDbName + '"';

def js = "'use strict';\n"
js += 'const cookie = require("/xmi2es/cookieCutter.sjs");\n'
js += 'cookie.createEntities(' + modelName + ',' + entitySelect + ',' + entities + ',' + stg + ');\n'
println js
  javascript = js;
}

task fetchEntities(type: com.marklogic.gradle.task.MlcpTask) {
  def directoryFilter = "/cookieCutter/"  + project.findProperty("modelName") + "/plugins/entities/"
  classpath = configurations.mlcp
  command = "EXPORT"
  output_file_path = "plugins"
  output_file_path = "data/cookieCutter-dump"
  directory_filter = directoryFilter
  host = mlHost
  port = mlFinalPort.toInteger()
}

task promoteEntities(type: Copy) {
    from "data/cookieCutter-dump/cookieCutter/" + project.findProperty("modelName") + "/plugins/entities"
    into "plugins/entities" 
}

task umlCreateEntities() {
  dependsOn 'deleteCutDump'
  dependsOn 'cutEntities'
  dependsOn 'fetchEntities'
  dependsOn 'promoteEntities'
  tasks.findByName('fetchEntities').mustRunAfter 'cutEntities'
  tasks.findByName('fetchEntities').mustRunAfter 'deleteCutDump'
  tasks.findByName('promoteEntities').mustRunAfter 'fetchEntities'
}

task cutHarmonizeFlow(type: com.marklogic.gradle.task.ServerEvalTask) {
  def modelName = project.findProperty("modelName")
  if (modelName != null) modelName = '"' + modelName + '"'
  def entityName = project.findProperty("entityName") 
  if (entityName != null) entityName = '"' + entityName + '"'
  def dataFormat = project.findProperty("dataFormat") 
  if (dataFormat != null) dataFormat = '"' + dataFormat + '"'
  def pluginFormat = project.findProperty("pluginFormat") 
  if (pluginFormat != null) pluginFormat = '"' + pluginFormat + '"'
  def flowName = project.findProperty("flowName") 
  if (flowName != null) flowName = '"' + flowName + '"'
  def contentMode = project.findProperty("contentMode") 
  if (contentMode != null) contentMode = '"' + contentMode + '"'
  def mappingHints = project.findProperty("mappingHints") 
  if (mappingHints != null) mappingHints = '"' + mappingHints + '"'

def js = "'use strict';\n"
js += 'const cookie = require("/xmi2es/cookieCutter.sjs");\n'
js += 'cookie.createHarmonizeFlow(' + modelName + ',' + entityName + ',' + dataFormat + ',' + pluginFormat + ',' + flowName + ',' + contentMode + ',' + mappingHints + ');\n'
println js
  javascript = js;
}

task fetchCutHarmonizeFlow(type: com.marklogic.gradle.task.MlcpTask) {
  def directoryFilter = "/cookieCutter/"  + project.findProperty("modelName") + "/plugins/entities/" + project.findProperty("entityName") + "/harmonize/" + project.findProperty("flowName") + "/"
  classpath = configurations.mlcp
  command = "EXPORT"
  output_file_path = "data/cookieCutter-dump"
  directory_filter = directoryFilter
  host = mlHost
  port = mlFinalPort.toInteger()
}

task promoteCutHarmonizeFlow(type: Copy) {
    def harmPath = "plugins/entities/" + project.findProperty("entityName") + "/harmonize"
    def flowPath = harmPath + "/" + project.findProperty("flowName") 
    enabled = project.findProperty("overwrite") == "true" || !file(flowPath).exists()
    from "data/cookieCutter-dump/cookieCutter/" + project.findProperty("modelName") + "/" + flowPath  
    into flowPath 
}

task umlCreateHarmonizeFlow() {
  dependsOn 'deleteCutDump'
  dependsOn 'cutHarmonizeFlow'
  dependsOn 'fetchCutHarmonizeFlow'
  dependsOn 'promoteCutHarmonizeFlow'
  //tasks.findByName('cutCookie').mustRunAfter 'loadHints'
  tasks.findByName('fetchCutHarmonizeFlow').mustRunAfter 'cutHarmonizeFlow'
  tasks.findByName('fetchCutHarmonizeFlow').mustRunAfter 'deleteCutDump'
  tasks.findByName('promoteCutHarmonizeFlow').mustRunAfter 'fetchCutHarmonizeFlow'
}
