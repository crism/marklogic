buildscript {

  repositories {
    jcenter{url "http://jcenter.bintray.com/"}
    mavenLocal()
    maven { url "http://plugins.gradle.org/m2" }
  }
  dependencies {
    classpath "com.marklogic:ml-gradle:3.2.0"
    classpath "net.saliman:gradle-properties-plugin:1.4.6"
  }
}

plugins {
   id 'com.marklogic.ml-data-hub' version '2.0.2'
}

apply plugin: "net.saliman.properties"
apply plugin: "com.marklogic.ml-gradle"
    
repositories {
  jcenter{url "http://jcenter.bintray.com/"}

  // Needed for mlcp dependencies
  maven { url "http://plugins.gradle.org/m2" }
  maven { url "http://developer.marklogic.com/maven2/" }

  // Needed for hadoop dependencies for mlcp
  maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
  // This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
  // to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
  // shown below.  Need to force to use certain version of xml-apis library.
  mlcp {
      resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
      }
    }
}

/**
 * ML 8.0-5 and 7.0-6 introduced a single mlcp dependency - see http://developer.marklogic.com/maven2/com/marklogic/mlcp/.
 * The 8.0-5 mlcp may very well work on ML versions prior to 8.0-5. If it doesn't, try the mlcp-Hadoop2
 * and marklogic-mapreduce2 dependencies that are commented out by default instead of the mlcp dependency.
 *
 * Note that at least with version 8.0-5 of mlcp, mlcp will complain on Windows that it cannot find
 * bin/winutils.exe. This does not appear to have any impact on mlcp behavior though.
 */
dependencies {

  mlcp "com.marklogic:mlcp:8.0.6.3"

  /**
   * If you need to import delimited text, be sure to include this dependency as well.
   */
  mlcp "org.apache.commons:commons-csv:1.2"

  /**
   * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
   * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
   * mlcp include a directory or some other resource that provides a log4j.properties file.
   */
  mlcp files("lib")
}

task loadGlobalEmployee(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/hr/GlobalCorp/employee";
  def regex = '"' + regexDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlStagingPort.toInteger()
  database = mlStagingDbName

  document_type = "json"
  input_file_path =  "data/hr/GlobalCorp/employee/EmployeeTable.csv"
  input_file_type ="delimited_text" 

  output_collections= "Employee,LoadEmployee,input" 
  output_permissions= "rest-reader,read,rest-writer,update" 
  output_uri_replace=regex
  output_uri_prefix = "/hr/employee/global/"
  output_uri_suffix = ".xml"

  transform_module="/com.marklogic.hub/mlcp-flow-transform.xqy" 
  transform_namespace="http://marklogic.com/data-hub/mlcp-flow-transform" 
  transform_param "entity-name=Employee,flow-name=LoadEmployee"	
}

task loadGlobalSalary(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/hr/GlobalCorp/employee";
  def regex = '"' + regexDir + ",'',/,''" + '"'

  println regex

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlStagingPort.toInteger()
  database = mlStagingDbName

  document_type = "json"
  input_file_path =  "data/hr/GlobalCorp/employee/SalaryTable.csv"
  input_file_type ="delimited_text" 

  output_collections= "Salary,LoadEmployee,input" 
  output_permissions= "rest-reader,read,rest-writer,update" 
  output_uri_replace=regex
  output_uri_prefix = "/hr/salary/global/"
  output_uri_suffix = ".xml"

  transform_module="/com.marklogic.hub/mlcp-flow-transform.xqy" 
  transform_namespace="http://marklogic.com/data-hub/mlcp-flow-transform" 
  transform_param "entity-name=Employee,flow-name=LoadEmployee"	
}

task loadGlobalDepartment(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/hr/GlobalCorp/department";
  def regex = '"' + regexDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlStagingPort.toInteger()
  database = mlStagingDbName

  document_type = "json"
  input_file_path =  "data/hr/GlobalCorp/department"
  input_file_type ="delimited_text" 

  output_collections= "Department,LoadDepartment,input" 
  output_permissions= "rest-reader,read,rest-writer,update" 
  output_uri_replace=regex
  output_uri_prefix = "/hr/department/global/"
  output_uri_suffix = ".xml"

  transform_module="/com.marklogic.hub/mlcp-flow-transform.xqy" 
  transform_namespace="http://marklogic.com/data-hub/mlcp-flow-transform" 
  transform_param "entity-name=Department,flow-name=LoadDepartment"	
}

task loadAcme(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/hr/AcmeTech";
  def regex = '"' + regexDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlStagingPort.toInteger()
  database = mlStagingDbName

  document_type = "json"
  input_file_path =  "data/hr/AcmeTech" 
  input_file_type = "documents" 

  output_collections "Employee,LoadEmployee,input" 
  output_permissions "rest-reader,read,rest-writer,update" 
  output_uri_replace = regex 
  output_uri_prefix = "/hr/employee/acme/"

  transform_module="/com.marklogic.hub/mlcp-flow-transform.xqy" 
  transform_namespace="http://marklogic.com/data-hub/mlcp-flow-transform" 
  transform_param "entity-name=Employee,flow-name=LoadEmployee"	
}

task loadSummaryOrgTriples(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlFinalPort.toInteger()
  database = mlFinalDbName

  document_type = "json"
  input_file_path =  "data/triples/global-org.ttl" 
  input_file_type = "rdf" 
  output_uri_prefix = "/triplestore"
  output_graph = "http://www.w3.org/ns/org"
}

task runInputMLCP() {
  dependsOn 'loadAcme'
  dependsOn 'loadGlobalEmployee'
  dependsOn 'loadGlobalSalary'
  dependsOn 'loadGlobalDepartment'
}

task includeXMI2ESTransform(type: Copy) {
    from "../../uml2esTransform/src/main/ml-modules/root/xmi2es"
    into "plugins/xmi2es"
}

task loadXMI(type: com.marklogic.gradle.task.MlcpTask) {
  def xmiDir = new File("${projectDir}").getParentFile().getAbsolutePath() + "/umlModels"
  def unixDir = xmiDir.replace('\\', '/');
  def regex = '"' + unixDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "xml"
  input_file_path = xmiDir + "/DHFEmployeeSample.xml"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/xmi/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "xmi2es"
  host = mlHost
  port = mlFinalPort.toInteger()

  transform_module = "/xmi2es/xmi2esTransform.xqy"
  transform_namespace ="http://marklogic.com/xmi2es"
  transform_param = "dummy"
}


task fetchDescriptors(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "EXPORT"
  output_file_path = "data/entity-services-dump"
  collection_filter = "xmi2es"
  host = mlHost
  port = mlFinalPort.toInteger()
}

task deleteESDump(type: Delete) {
    delete "data/entity-services-dump"
}

task copyES(type: Copy) {
    from "data/entity-services-dump/xmi2es/es/DHFEmployeeSample.json"
    into "data/entity-services" 
}

task copyESExt(type: Copy) {
    from "data/entity-services-dump/xmi2es/extension/DHFEmployeeSample.ttl"
    into "data/entity-services-extension" 
}

task ingestModel() {
  dependsOn 'deleteESDump'
  dependsOn 'loadXMI'
  dependsOn 'fetchDescriptors'
  dependsOn 'copyES'
  dependsOn 'copyESExt'
  tasks.findByName('loadXMI').mustRunAfter 'deleteESDump'
  tasks.findByName('fetchDescriptors').mustRunAfter 'loadXMI'
  tasks.findByName('copyES').mustRunAfter 'fetchDescriptors'
  tasks.findByName('copyESExt').mustRunAfter 'fetchDescriptors'
}

task clearGenerated(type: Delete) {
  dependsOn 'deleteESDump'
  delete 'user-config/schemas'
  delete "src/main"
}

task loadExtendedModel(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlFinalPort.toInteger()
  database = mlFinalDbName

  input_file_path =  "data/entity-services-extension/*.ttl" 
  input_file_type = "rdf" 
  output_uri_prefix = "/triplestore"
}

task workaroundDeployESModelToFinal(type: com.marklogic.gradle.task.MlcpTask) {
  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/entity-services";
  def regex = '"' + regexDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "json"
  input_file_path = "data/entity-services"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/marklogic.com/entity-services/models/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "http://marklogic.com/entity-services/models"
  host = mlHost
  port = mlFinalPort.toInteger()
}
