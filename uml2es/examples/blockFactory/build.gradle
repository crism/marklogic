buildscript {

  repositories {
    jcenter{url "http://jcenter.bintray.com/"}
    mavenLocal()
    maven { url "http://plugins.gradle.org/m2" }
  }
  dependencies {
    classpath "com.marklogic:ml-gradle:3.4.0"
    classpath "net.saliman:gradle-properties-plugin:1.4.6"
  }
}

apply plugin: "net.saliman.properties"
apply plugin: "com.marklogic.ml-gradle"

repositories {
  jcenter{url "http://jcenter.bintray.com/"}

  // Needed for mlcp dependencies
  maven { url "http://plugins.gradle.org/m2" }
  maven { url "http://developer.marklogic.com/maven2/" }

  // Needed for hadoop dependencies for mlcp
  maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
  // This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
  // to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
  // shown below.  Need to force to use certain version of xml-apis library.
  mlcp {
      resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
      }
    }
}

dependencies {
  mlcp "com.marklogic:mlcp:9.0.6"
  mlcp "org.apache.commons:commons-csv:1.2"
  mlcp files("lib")
}

task ingestBlockData
["client", "color", "material", "block", "model", "custom"].each { entityType ->
   task "ingestEntity${entityType}"(type: com.marklogic.gradle.task.MlcpTask) {

  def dataDir = "${projectDir}";
  def unixDir = dataDir.replace('\\', '/');
  def regexDir = unixDir+"/data/blockfactory/${entityType}"
  def regex = '"' + regexDir + ",'',/,'',.json,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlAppConfig.contentDatabaseName
  document_type = "json"
  input_file_path = "data/blockfactory/${entityType}"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/blockFactory/${entityType}/"
  output_uri_suffix = ".json"
  output_collections = "xmi2es,blockFactory"
  output_permissions = "rest-reader,read,rest-writer,update"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()
  transform_module = "/xmi2es/loadBlockFactoryTransformation.xqy"
  transform_namespace ="http://marklogic.com/xmi2es/blockFactory"
  transform_param = "${entityType}"

   } 
   ingestBlockData.dependsOn "ingestEntity${entityType}"
}

tasks.findByName('ingestEntitymodel').mustRunAfter 'ingestEntityblock'
tasks.findByName('ingestEntitymodel').mustRunAfter 'ingestEntitymaterial'
tasks.findByName('ingestEntitymodel').mustRunAfter 'ingestEntitycolor'
tasks.findByName('ingestEntitycustom').mustRunAfter 'ingestEntityblock'
tasks.findByName('ingestEntitycustom').mustRunAfter 'ingestEntitymaterial'
tasks.findByName('ingestEntitycustom').mustRunAfter 'ingestEntitycolor'

task includeXMI2ESTransform(type: Copy) {
    from "../../uml2esTransform/src/main/ml-modules/root/xmi2es"
    into "src/main/ml-modules/root/xmi2es"
}

task includeModel(type: Copy) {
    def xmiDir = new File("${projectDir}").getParentFile().getAbsolutePath() + "/umlModels"
    from xmiDir + "/BlockFactory.xml"
    into "data/model"
}

task includeUGradle() {
  // Don't use Copy task bcuz file locking into gradle project dir on Windows
  doLast {
    copy {
      from "../../uml2esTransform/uml2es.gradle"
      into "."
    }
}

task setup() {
  dependsOn('includeXMI2ESTransform')
  dependsOn('includeModel')
  dependsOn('includeUGradle')
}

task deleteGenerated(type: Delete) {
  delete "src/main/ml-modules/ext/entity-services/BlockFactory-0.0.1-GENERATED.xqy"
}

/*
Edit this to enable/disable code generation of mlGenerateModelArtifacts
*/
ext {   
  def mdb = project.findProperty("mlFinalDbName")
  if (mdb == null) mdb = project.findProperty("mlAppName" + "-content")
  mlAppConfig {
    modelsDatabase=mdb
    generateInstanceConverter=true
    generateSchema=false
    generateDatabaseProperties=false
    generateExtractionTemplate=false
    generateSearchOptions=false
  }
}
