buildscript {

	repositories {
		jcenter{url "http://jcenter.bintray.com/"}
		mavenLocal()
		maven { url "http://plugins.gradle.org/m2" }
	}
	dependencies {
		classpath "com.marklogic:ml-gradle:3.4.0"
		classpath "net.saliman:gradle-properties-plugin:1.4.6"
	}
}

apply plugin: "net.saliman.properties"
apply plugin: "com.marklogic.ml-gradle"

repositories {
	jcenter{url "http://jcenter.bintray.com/"}

	// Needed for mlcp dependencies
	maven { url "http://plugins.gradle.org/m2" }
	maven { url "http://developer.marklogic.com/maven2/" }

	// Needed for hadoop dependencies for mlcp
	maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
  // This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
  // to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
  // shown below.  Need to force to use certain version of xml-apis library.
  mlcp {
      resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
      }
    }
}

/**
 * ML 8.0-5 and 7.0-6 introduced a single mlcp dependency - see http://developer.marklogic.com/maven2/com/marklogic/mlcp/.
 * The 8.0-5 mlcp may very well work on ML versions prior to 8.0-5. If it doesn't, try the mlcp-Hadoop2
 * and marklogic-mapreduce2 dependencies that are commented out by default instead of the mlcp dependency.
 *
 * Note that at least with version 8.0-5 of mlcp, mlcp will complain on Windows that it cannot find
 * bin/winutils.exe. This does not appear to have any impact on mlcp behavior though.
 */
dependencies {

  mlcp "com.marklogic:mlcp:8.0.6.3"

  /**
   * If you need to import delimited text, be sure to include this dependency as well.
   */
  mlcp "org.apache.commons:commons-csv:1.2"

  /**
   * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
   * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
   * mlcp include a directory or some other resource that provides a log4j.properties file.
   */
  mlcp files("lib")
}

task includeXMI2ESTransform(type: Copy) {
    from "../../uml2esTransform/src/main/ml-modules/root/xmi2es"
    into "src/main/ml-modules/root/xmi2es"
}

task loadExcel(type: com.marklogic.gradle.task.MlcpTask) {
  def xmiDir = new File("${projectDir}").getAbsolutePath()
  def unixDir = xmiDir.replace('\\', '/');
  def regex = '"' + unixDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "binary"
  input_file_path = xmiDir + "/HRExcel.xlsx"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/excel/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "xmi2es"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()

  transform_module = "/xmi2es/excel2uml.xqy"
  transform_namespace = "http://marklogic.com/xmi2es/xlsx"
  transform_param = "dummy"
}

task loadUML(type: com.marklogic.gradle.task.MlcpTask) {
  def xmiDir = new File("${projectDir}").getParentFile().getAbsolutePath() + "/umlModels"
  def unixDir = xmiDir.replace('\\', '/');
  def regex = '"' + unixDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "xml"
  input_file_path = xmiDir + "/DHFEmployeeSample.xml"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/xmi/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "xmi2es"
  host = mlHost
  port = mlAppServicesPort.toInteger()

  transform_module = "/xmi2es/xmi2esTransform.xqy"
  transform_namespace ="http://marklogic.com/xmi2es"
  transform_param = '{"genlang":"xqy"}'
}

task loadTest1(type: com.marklogic.gradle.task.MlcpTask) {
  def xmiDir = new File("${projectDir}").getAbsolutePath()
  def unixDir = xmiDir.replace('\\', '/');
  def regex = '"' + unixDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "binary"
  input_file_path = xmiDir + "/test1.xlsx"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/excel/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "xmi2es"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()

  transform_module = "/xmi2es/excel2uml.xqy"
  transform_namespace = "http://marklogic.com/xmi2es/xlsx"
  transform_param = "dummy"
}

task loadTest2(type: com.marklogic.gradle.task.MlcpTask) {
  def xmiDir = new File("${projectDir}").getAbsolutePath()
  def unixDir = xmiDir.replace('\\', '/');
  def regex = '"' + unixDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "binary"
  input_file_path = xmiDir + "/test2.xlsx"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/excel/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "xmi2es"
  host = mlAppServicesHost
  port = mlAppServicesPort.toInteger()

  transform_module = "/xmi2es/excel2uml.xqy"
  transform_namespace = "http://marklogic.com/xmi2es/xlsx"
  transform_param = "dummy"
}
